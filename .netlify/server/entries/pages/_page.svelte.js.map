{"version":3,"file":"_page.svelte.js","sources":["../../../../../node_modules/.pnpm/@sveltejs+kit@1.22.3_svelte@4.1.1_vite@4.4.7/node_modules/@sveltejs/kit/src/runtime/client/singletons.js","../../../../../node_modules/.pnpm/@sveltejs+kit@1.22.3_svelte@4.1.1_vite@4.4.7/node_modules/@sveltejs/kit/src/runtime/app/navigation.js","../../../../../src/lib/classes/ChatMessage.ts","../../../../../src/lib/classes/Tab.ts","../../../../../src/lib/classes/Utility.ts","../../../../../src/lib/classes/HomeTab.ts","../../../../../src/lib/classes/TabHandler.ts","../../../../../src/lib/classes/Command.ts","../../../../../src/lib/classes/CommandDispatcher.ts","../../../../../src/lib/classes/ToastData.ts","../../../../../src/lib/enums.ts","../../../../../src/lib/classes/Preferences.ts","../../../../../src/lib/classes/ChatTab.ts","../../../../../src/lib/components/ChatItem.svelte","../../../../../src/lib/components/ChatTabContent.svelte","../../../../../src/lib/components/TabButton.svelte","../../../../../src/lib/components/Modal.svelte","../../../../../src/lib/components/Modal/PreferencesModal.svelte","../../../../../src/lib/components/Input.svelte","../../../../../src/lib/components/HomeTabContent.svelte","../../../../../src/lib/classes/ExportOptions.ts","../../../../../src/lib/components/Modal/ExportModal.svelte","../../../../../src/routes/+page.svelte"],"sourcesContent":["import { writable } from 'svelte/store';\nimport { create_updated_store, notifiable_store } from './utils.js';\nimport { BROWSER } from 'esm-env';\n\n/** @type {import('./types').Client} */\nexport let client;\n\n/**\n * @param {{\n *   client: import('./types').Client;\n * }} opts\n */\nexport function init(opts) {\n\tclient = opts.client;\n}\n\n/**\n * @template {keyof typeof client} T\n * @param {T} key\n * @returns {typeof client[T]}\n */\nexport function client_method(key) {\n\tif (!BROWSER) {\n\t\tif (key === 'before_navigate' || key === 'after_navigate') {\n\t\t\t// @ts-expect-error doesn't recognize that both keys here return void so expects a async function\n\t\t\treturn () => {};\n\t\t} else {\n\t\t\t/** @type {Record<string, string>} */\n\t\t\tconst name_lookup = {\n\t\t\t\tdisable_scroll_handling: 'disableScrollHandling',\n\t\t\t\tpreload_data: 'preloadData',\n\t\t\t\tpreload_code: 'preloadCode',\n\t\t\t\tinvalidate_all: 'invalidateAll'\n\t\t\t};\n\n\t\t\treturn () => {\n\t\t\t\tthrow new Error(`Cannot call ${name_lookup[key] ?? key}(...) on the server`);\n\t\t\t};\n\t\t}\n\t} else {\n\t\t// @ts-expect-error\n\t\treturn (...args) => client[key](...args);\n\t}\n}\n\nexport const stores = {\n\turl: /* @__PURE__ */ notifiable_store({}),\n\tpage: /* @__PURE__ */ notifiable_store({}),\n\tnavigating: /* @__PURE__ */ writable(\n\t\t/** @type {import('@sveltejs/kit').Navigation | null} */ (null)\n\t),\n\tupdated: /* @__PURE__ */ create_updated_store()\n};\n","import { client_method } from '../client/singletons.js';\n\n/**\n * If called when the page is being updated following a navigation (in `onMount` or `afterNavigate` or an action, for example), this disables SvelteKit's built-in scroll handling.\n * This is generally discouraged, since it breaks user expectations.\n * @returns {void}\n */\nexport const disableScrollHandling = /* @__PURE__ */ client_method('disable_scroll_handling');\n\n/**\n * Returns a Promise that resolves when SvelteKit navigates (or fails to navigate, in which case the promise rejects) to the specified `url`.\n * For external URLs, use `window.location = url` instead of calling `goto(url)`.\n *\n * @type {(url: string | URL, opts?: {\n *   replaceState?: boolean;\n *   noScroll?: boolean;\n *   keepFocus?: boolean;\n *   invalidateAll?: boolean;\n *   state?: any\n * }) => Promise<void>}\n * @param {string | URL} url Where to navigate to. Note that if you've set [`config.kit.paths.base`](https://kit.svelte.dev/docs/configuration#paths) and the URL is root-relative, you need to prepend the base path if you want to navigate within the app.\n * @param {Object} [opts] Options related to the navigation\n * @param {boolean} [opts.replaceState] If `true`, will replace the current `history` entry rather than creating a new one with `pushState`\n * @param {boolean} [opts.noScroll] If `true`, the browser will maintain its scroll position rather than scrolling to the top of the page after navigation\n * @param {boolean} [opts.keepFocus] If `true`, the currently focused element will retain focus after navigation. Otherwise, focus will be reset to the body\n * @param {boolean} [invalidateAll] If `true`, all `load` functions of the page will be rerun. See https://kit.svelte.dev/docs/load#rerunning-load-functions for more info on invalidation.\n * @param {any} [opts.state] The state of the new/updated history entry\n * @returns {Promise<void>}\n */\nexport const goto = /* @__PURE__ */ client_method('goto');\n\n/**\n * Causes any `load` functions belonging to the currently active page to re-run if they depend on the `url` in question, via `fetch` or `depends`. Returns a `Promise` that resolves when the page is subsequently updated.\n *\n * If the argument is given as a `string` or `URL`, it must resolve to the same URL that was passed to `fetch` or `depends` (including query parameters).\n * To create a custom identifier, use a string beginning with `[a-z]+:` (e.g. `custom:state`) â€” this is a valid URL.\n *\n * The `function` argument can be used define a custom predicate. It receives the full `URL` and causes `load` to rerun if `true` is returned.\n * This can be useful if you want to invalidate based on a pattern instead of a exact match.\n *\n * ```ts\n * // Example: Match '/path' regardless of the query parameters\n * import { invalidate } from '$app/navigation';\n *\n * invalidate((url) => url.pathname === '/path');\n * ```\n * @type {(url: string | URL | ((url: URL) => boolean)) => Promise<void>}\n * @param {string | URL | ((url: URL) => boolean)} url The invalidated URL\n * @returns {Promise<void>}\n */\nexport const invalidate = /* @__PURE__ */ client_method('invalidate');\n\n/**\n * Causes all `load` functions belonging to the currently active page to re-run. Returns a `Promise` that resolves when the page is subsequently updated.\n * @type {() => Promise<void>}\n * @returns {Promise<void>}\n */\nexport const invalidateAll = /* @__PURE__ */ client_method('invalidate_all');\n\n/**\n * Programmatically preloads the given page, which means\n *  1. ensuring that the code for the page is loaded, and\n *  2. calling the page's load function with the appropriate options.\n *\n * This is the same behaviour that SvelteKit triggers when the user taps or mouses over an `<a>` element with `data-sveltekit-preload-data`.\n * If the next navigation is to `href`, the values returned from load will be used, making navigation instantaneous.\n * Returns a Promise that resolves when the preload is complete.\n *\n * @type {(href: string) => Promise<void>}\n * @param {string} href Page to preload\n * @returns {Promise<void>}\n */\nexport const preloadData = /* @__PURE__ */ client_method('preload_data');\n\n/**\n * Programmatically imports the code for routes that haven't yet been fetched.\n * Typically, you might call this to speed up subsequent navigation.\n *\n * You can specify routes by any matching pathname such as `/about` (to match `src/routes/about/+page.svelte`) or `/blog/*` (to match `src/routes/blog/[slug]/+page.svelte`).\n *\n * Unlike `preloadData`, this won't call `load` functions.\n * Returns a Promise that resolves when the modules have been imported.\n *\n * @type {(...urls: string[]) => Promise<void>}\n * @param {...string[]} urls\n * @returns {Promise<void>}\n */\nexport const preloadCode = /* @__PURE__ */ client_method('preload_code');\n\n/**\n * A navigation interceptor that triggers before we navigate to a new URL, whether by clicking a link, calling `goto(...)`, or using the browser back/forward controls.\n * Calling `cancel()` will prevent the navigation from completing. If the navigation would have directly unloaded the current page, calling `cancel` will trigger the native\n * browser unload confirmation dialog. In these cases, `navigation.willUnload` is `true`.\n *\n * When a navigation isn't client side, `navigation.to.route.id` will be `null`.\n *\n * `beforeNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @type {(callback: (navigation: import('@sveltejs/kit').BeforeNavigate) => void) => void}\n * @param {(navigation: import('@sveltejs/kit').BeforeNavigate) => void} callback\n * @returns {void}\n */\nexport const beforeNavigate = /* @__PURE__ */ client_method('before_navigate');\n\n/**\n * A lifecycle function that runs the supplied `callback` when the current component mounts, and also whenever we navigate to a new URL.\n *\n * `afterNavigate` must be called during a component initialization. It remains active as long as the component is mounted.\n * @type {(callback: (navigation: import('@sveltejs/kit').AfterNavigate) => void) => void}\n * @param {(navigation: import('@sveltejs/kit').AfterNavigate) => void} callback\n * @returns {void}\n */\nexport const afterNavigate = /* @__PURE__ */ client_method('after_navigate');\n","import dayjs from \"dayjs\";\r\nimport utc from \"dayjs/plugin/utc\";\r\n\r\nexport type ChatMessageType = \"user\" | \"system\";\r\n\r\nexport class ChatMessage {\r\n    author: string | undefined;\r\n    type: ChatMessageType;\r\n    text;\r\n    isError;\r\n    time;\r\n\r\n    constructor(author: string | undefined, type: ChatMessageType, text: string, isError: boolean = false) {\r\n        this.author = author;\r\n        this.type = type;\r\n        this.text = text;\r\n        this.isError = isError;\r\n        this.time = Date.now();\r\n\r\n        dayjs.extend(utc);\r\n    }\r\n\r\n    getRelativeTime = (relativeStartTime: number) => {\r\n        return dayjs.utc(this.time - relativeStartTime).format(\"HH:mm:ss\");\r\n    };\r\n\r\n    serialize(): string {\r\n        return ChatMessage.serialize(this);\r\n    }\r\n\r\n    static serialize(chatMessage: ChatMessage): string {\r\n        return JSON.stringify(chatMessage);\r\n    }\r\n}\r\n","import type { IconSource } from \"@steeze-ui/heroicons\";\r\nimport { writable } from \"svelte/store\";\r\n\r\nexport abstract class Tab {\r\n    name = writable<string>();\r\n    heroIcon?: IconSource;\r\n\r\n    constructor(name?: string, heroIcon?: IconSource) {\r\n        this.name.set(name || \"NULL\");\r\n        this.heroIcon = heroIcon;\r\n    }\r\n\r\n    dispose = async () => { };\r\n}\r\n","import type { Readable } from \"svelte/store\";\r\n\r\n// https://stackoverflow.com/a/66819321/14270868\r\nexport const subscribeStoreDefer = <T>(store: Readable<T>, fn: (state: T) => void) => {\r\n    let firedFirst = false;\r\n    return store.subscribe((state: T) => {\r\n        if (!firedFirst) {\r\n            firedFirst = true;\r\n        } else {\r\n            fn(state);\r\n        }\r\n    });\r\n};\r\n\r\nexport const isNatural = (number: string): boolean => {\r\n    if (number) {\r\n        return !!number.match(/^\\d+$/);\r\n    }\r\n\r\n    return false;\r\n};\r\n\r\nexport const isInteger = (number: string): boolean => {\r\n    if (number) {\r\n        return !!number.match(/^-?\\d+$/);\r\n    }\r\n\r\n    return false;\r\n};\r\n","import { Tab } from \"./Tab\";\r\nimport { Home } from \"@steeze-ui/heroicons\";\r\n\r\nexport class HomeTab extends Tab {    \r\n    constructor() {\r\n        super(\"~HOME\", Home);\r\n    }\r\n}\r\n","import { get, writable } from \"svelte/store\";\r\nimport type { Tab } from \"./Tab\";\r\nimport { HomeTab } from \"./HomeTab\";\r\nimport { ChatTab } from \"./ChatTab\";\r\n\r\nexport const tabsStore = writable<Tab[]>([new HomeTab()]);\r\nexport const currentTabIdx = writable<number>(0);\r\n\r\nexport const addTab = (tab: Tab) => {\r\n    tabsStore.update((value) => value.concat(tab));\r\n    changeTab(get(tabsStore).length - 1);\r\n};\r\n\r\nexport const closeTab = async (tab: Tab) => {\r\n    await tab.dispose();\r\n    if (tab === get(tabsStore)[get(currentTabIdx)]) {\r\n        currentTabIdx.update((index) => index > 0 ? index - 1 : 0);\r\n    }\r\n    tabsStore.update((value) => value.filter((t) => t !== tab));\r\n};\r\n\r\nexport const closeAllTabs = async () => {\r\n    for (const tab of get(tabsStore)) {\r\n        await closeTab(tab);\r\n    }\r\n};\r\n\r\nexport const changeTab = (index: number) => {\r\n    if (index >= 0 && index < get(tabsStore).length) {\r\n        const tabs = get(tabsStore);\r\n        const previousTab = tabs[get(currentTabIdx)];\r\n        const currentTab = tabs[index];\r\n        currentTabIdx.set(index);\r\n\r\n        if (previousTab instanceof ChatTab) {\r\n            previousTab.lastReadMessage = get(previousTab.messages).at(-1);\r\n        }\r\n\r\n        if (currentTab instanceof ChatTab) {\r\n            currentTab.isUnread.set(false);\r\n        }\r\n    }\r\n};\r\n","import { ChatMessage } from \"./ChatMessage\";\r\nimport { isInteger, isNatural } from \"./Utility\";\r\nimport type { MainState } from \"../../../server/src/schema/MainState\";\r\nimport type { Room } from \"colyseus.js\";\r\nimport type { ClientData } from \"../../../server/src/schema/ClientData\";\r\nimport { closeTab } from \"./TabHandler\";\r\nimport type { ChatTab } from \"./ChatTab\";\r\n\r\n// https://stackoverflow.com/a/60807986/14270868\r\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends ((k: infer I) => void) ? I : never;\r\ntype IsUnion<T> = [T] extends [UnionToIntersection<T>] ? false : true;\r\ntype SingleKey<T> = IsUnion<keyof T> extends true ? never : object extends T ? never : T;\r\n\r\nexport abstract class Cmd {\r\n    args: { [key: string]: string | number; } = {};\r\n    protected context: CmdContext;\r\n    protected clientData: ClientData;\r\n\r\n    constructor(context: CmdContext) {\r\n        this.context = context;\r\n        this.clientData = this.context.room.state.clientData.find((c) => c.sessionId === this.context.room.sessionId)!;\r\n    }\r\n\r\n    abstract execute(): Promise<ChatMessage | undefined> | undefined;\r\n\r\n    static help(): string | undefined { return }\r\n\r\n    protected static asSystem(text: string, isError: boolean = false) {\r\n        return new ChatMessage(undefined, \"system\", text, isError);\r\n    }\r\n\r\n    protected static toInt<T extends Record<string, string>>(number: SingleKey<T>, allowNegative: boolean = false): number {\r\n        const [name, value] = Object.entries(number)[0];\r\n\r\n        if (isNatural(value) || allowNegative && isInteger(value)) {\r\n            return parseInt(value);\r\n        } else {\r\n            const errorMessage = allowNegative ? `Argument '${name}' must be a whole number.` : `Argument '${name}' must be a positive whole number.`;\r\n            throw new CmdError(errorMessage);\r\n        }\r\n    }\r\n\r\n    protected static toEnum<T extends Record<string, string>, K extends string>(string: SingleKey<T>, options: readonly K[]): K {\r\n        const [name, value] = Object.entries(string)[0];\r\n\r\n        if (options.includes(value as K)) {\r\n            return value as K;\r\n        } else {\r\n            throw new CmdError(`Argument '${name}' must be one of: ${options.map((opt) => `'${opt}'`).join(\", \")}.`);\r\n        }\r\n    }\r\n}\r\n\r\nexport class CmdContext {\r\n    room: Room<MainState>;\r\n    chatTab: ChatTab;\r\n\r\n    constructor(room: Room<MainState>, chatTab: ChatTab) {\r\n        this.room = room;\r\n        this.chatTab = chatTab;\r\n    }\r\n}\r\n\r\nexport class CmdError implements Error {\r\n    name: string = \"CmdError\";\r\n    message: string;\r\n    stack?: string | undefined;\r\n    cause?: unknown;\r\n\r\n    constructor(message: string) {\r\n        this.message = message;\r\n    }\r\n}\r\n\r\nexport class PingCmd extends Cmd {\r\n    override args;\r\n\r\n    constructor(context: CmdContext, delay: string) {\r\n        super(context);\r\n        this.args = {\r\n            delay: Cmd.toInt({ delay }),\r\n        };\r\n    }\r\n\r\n    override execute(): Promise<ChatMessage | undefined> | undefined {\r\n        this.context.room.send(\"cmd-ping\", { delay: this.args.delay });\r\n        return;\r\n    }\r\n}\r\n\r\nexport class LeaveCmd extends Cmd {\r\n    constructor(context: CmdContext) {\r\n        super(context);\r\n    }\r\n    \r\n    override async execute(): Promise<ChatMessage | undefined> {\r\n        await closeTab(this.context.chatTab);\r\n        return;\r\n    }\r\n}\r\n","import { get, type Writable } from \"svelte/store\";\r\nimport type { MainState } from \"../../../server/src/schema/MainState\";\r\nimport { ChatMessage } from \"./ChatMessage\";\r\nimport { Cmd, CmdContext, CmdError, LeaveCmd, PingCmd } from \"./Command\";\r\nimport type * as Colyseus from \"colyseus.js\";\r\nimport type { ChatTab } from \"./ChatTab\";\r\n\r\nexport class CommandDispatcher {\r\n    chatTab: ChatTab;\r\n    roomStore: Writable<Colyseus.Room<MainState>>;\r\n\r\n    constructor(chatTab: ChatTab) {\r\n        this.chatTab = chatTab;\r\n        this.roomStore = chatTab.roomStore;\r\n    }\r\n\r\n    executeCommand = async (commandName: string, ...args: string[]): Promise<ChatMessage | undefined> => {\r\n        const err = (message: string) => {\r\n            return new ChatMessage(undefined, \"system\", message, true);\r\n        };\r\n\r\n        try {\r\n            if (Object.keys(commandRefs).includes(commandName)) {\r\n                const context = new CmdContext(get(this.roomStore), this.chatTab);\r\n                return await commandRefs[commandName as keyof typeof commandRefs](context, ...args).execute();\r\n            } else {\r\n                return err(`Command '${commandName}' could not be found.`);\r\n            }\r\n        } catch (error) {\r\n            if (error instanceof CmdError) {\r\n                return err(error.message);\r\n            } else if (error instanceof Error) {\r\n                console.error(error);\r\n            } else {\r\n                console.error(error);\r\n            }\r\n\r\n            return err(\"An unknown error occurred.\");\r\n        }\r\n    };\r\n}\r\n\r\nexport const commandRefs = {\r\n    ping: (context: CmdContext, ...args: string[]) => new PingCmd(context, args[0]),\r\n    leave: (context: CmdContext) => new LeaveCmd(context),\r\n} satisfies { [key: string]: (context: CmdContext, ...args: string[]) => Cmd };\r\n","export default class ToastData {\r\n    static readonly DEFAULT_DURATIONS = {\r\n        success: 5000,\r\n        info: 5000,\r\n        warning: 8000,\r\n        error: 12000,\r\n    };\r\n\r\n    severity;\r\n    message: string;\r\n    detail: string;\r\n\r\n    private _duration;\r\n    get duration() {\r\n        return this._duration === \"disabled\" ? -1 : this._duration === \"auto\" ? this.evaluateAutoDuration() : this._duration;\r\n    }\r\n\r\n    get expires() {\r\n        // Checkes against getter in case this.#evaluateAutoDuration evaluates to non-positive number\r\n        return this.duration >= 0;\r\n    }\r\n\r\n    constructor(severity: \"success\" | \"info\" | \"warning\" | \"error\" = \"info\", message: string = \"Message\", detail: string = \"Detail\", duration: \"disabled\" | \"auto\" | number = \"auto\") {\r\n        this.severity = severity;\r\n        this.message = message;\r\n        this.detail = detail;\r\n        this._duration = duration;\r\n    }\r\n\r\n    private evaluateAutoDuration = () => {\r\n        return ToastData.DEFAULT_DURATIONS[this.severity];\r\n    };\r\n\r\n    clone = () => {\r\n        return new ToastData(this.severity, this.message, this.detail, this._duration);\r\n    };\r\n}\r\n","/** The condition for when the chat should automatically scroll. */\r\nexport const enum AutoScrollBehaviour {\r\n    /** Automatically scroll when any message is sent or received. */\r\n    Always,\r\n    /** Automatically scroll only when the client sends a message. */\r\n    OnlySelf,\r\n    /** Never automatically scroll. */\r\n    Never,\r\n}\r\n\r\n/** The style of message chats. */\r\nexport const enum ChatStyle {\r\n    /** Looser leading, greater readability. */\r\n    Cozy,\r\n    /** Tighter leading, less padding. */\r\n    Compact,\r\n}\r\n\r\n/** The range of messages that should be exported. */\r\nexport const enum ExportTimeRange {\r\n    FifteenMinutes,\r\n    OneHour,\r\n    SixHours,\r\n    Today,\r\n    All,\r\n}\r\n","import { browser } from \"$app/environment\";\r\nimport { AutoScrollBehaviour, ChatStyle } from \"$lib/enums\";\r\nimport { writable, type Writable } from \"svelte/store\";\r\nimport { subscribeStoreDefer } from \"./Utility\";\r\n\r\nexport class Preferences {\r\n    username = writable<string>(\"\");\r\n    chatStyle = writable<ChatStyle>(ChatStyle.Cozy);\r\n    autoScrollBehaviour = writable<AutoScrollBehaviour>(AutoScrollBehaviour.OnlySelf);\r\n    darkMode = writable<boolean>(false);\r\n    joinLeaveMessages = writable<boolean>(true);\r\n\r\n    constructor() {\r\n        for (const key in this) {\r\n            if (Object.prototype.hasOwnProperty.call(this, key)) {\r\n                const prop = this[key] as any;\r\n                if (prop.subscribe) {\r\n                    const store = prop as Writable<never>;\r\n                    subscribeStoreDefer(store, (value) => {\r\n                        const oldStorage = JSON.parse(localStorage.getItem(\"preferences\") || \"{}\");\r\n                        oldStorage[key] = value;\r\n                        localStorage.setItem(\"preferences\", JSON.stringify(oldStorage));\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        subscribeStoreDefer(this.darkMode, (value) => {\r\n            if (value) {\r\n                if (!document.documentElement.classList.contains(\"dark\")) {\r\n                    document.documentElement.classList.add(\"dark\");\r\n                }\r\n            } else {\r\n                if (document.documentElement.classList.contains(\"dark\")) {\r\n                    document.documentElement.classList.remove(\"dark\");\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    static loadPrefs = () => {\r\n        const prefs = new Preferences();\r\n\r\n        if (browser) {\r\n            const storageRaw = localStorage.getItem(\"preferences\");\r\n            if (storageRaw) {\r\n                const storage = JSON.parse(storageRaw);\r\n\r\n                for (const key in storage) {\r\n                    if (Object.prototype.hasOwnProperty.call(storage, key)) {\r\n                        const storageProp = storage[key] as any;\r\n                        if (Object.prototype.hasOwnProperty.call(prefs, key)) {\r\n                            const prop = prefs[key as never] as any;\r\n                            if (prop.subscribe) {\r\n                                const store = prop as Writable<never>;\r\n                                store.set(storageProp as never);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return prefs;\r\n    };\r\n}\r\n\r\nexport const preferences: Preferences = Preferences.loadPrefs();\r\n","import { get, writable } from \"svelte/store\";\r\nimport { ChatMessage } from \"./ChatMessage\";\r\nimport { Tab } from \"./Tab\";\r\nimport { clientStore, toastContainerStore } from \"./Stores\";\r\nimport type * as Colyseus from \"colyseus.js\";\r\nimport type { MainState } from \"../../../server/src/schema/MainState\";\r\nimport { CommandDispatcher } from \"./CommandDispatcher\";\r\nimport { closeTab } from \"./TabHandler\";\r\nimport ToastData from \"./ToastData\";\r\nimport { tabsStore, currentTabIdx } from \"./TabHandler\";\r\nimport type { ClientData } from \"../../../server/src/schema/ClientData\";\r\nimport { preferences } from \"./Preferences\";\r\n\r\nexport class ChatTab extends Tab {\r\n    roomStore = writable<Colyseus.Room<MainState>>();\r\n    commandDispatcher = new CommandDispatcher(this);\r\n\r\n    messages = writable<ChatMessage[]>([]);\r\n    clients = writable<{ clientId: string; sessionId: string, isLeader: boolean }[]>([]);\r\n\r\n    lastReadMessage: ChatMessage | undefined;\r\n    isUnread = writable<boolean>(false);\r\n\r\n    effectiveUsername = writable<string>(\"\");\r\n\r\n    private acceptingJoinMessages: boolean = false;\r\n\r\n    constructor(code?: string) {\r\n        super();\r\n\r\n        if (code) {\r\n            this.join(code);\r\n        } else {\r\n            this.create();\r\n        }\r\n    }\r\n\r\n    addMessage = (message: ChatMessage) => {\r\n        this.messages.update((current: ChatMessage[]) => current.concat(message));\r\n\r\n        // Mark as unread\r\n        if (get(tabsStore)[get(currentTabIdx)] !== this) {\r\n            this.isUnread.set(true);\r\n        }\r\n    };\r\n\r\n    private create = () => {\r\n        get(clientStore).create<MainState>(\"chat-room\", { clientId: get(preferences.username) })\r\n            .then((room) => this.initialiseRoom(room))\r\n            .catch((err) => this.handleError(err));\r\n    };\r\n\r\n    private join = (code: string) => {\r\n        get(clientStore).joinById<MainState>(code, { clientId: get(preferences.username) })\r\n            .then((room) => this.initialiseRoom(room))\r\n            .catch((err) => this.handleError(err));\r\n    };\r\n\r\n    private initialiseRoom = (room: Colyseus.Room<MainState>) => {\r\n        this.roomStore.set(room);\r\n        this.name.set(room.roomId);\r\n\r\n        room.onLeave(() => {\r\n            this.dispose();\r\n        });\r\n\r\n        if (process.env.NODE_ENV === \"development\") {\r\n            room.onMessage(\"__playground_message_types\", (message) => {\r\n                console.debug(\"Playground message types\", message);\r\n            });\r\n        }\r\n\r\n        room.state.clientData.onAdd((client: ClientData) => {\r\n            this.clients.update((clients) => clients.concat({ clientId: client.clientId, sessionId: client.sessionId, isLeader: get(this.roomStore).state.leader === client.clientId }));\r\n\r\n            if (client.sessionId === get(this.roomStore).sessionId) {\r\n                this.acceptingJoinMessages = true; // Only show join messages once all 'present' clients have been processed\r\n                this.effectiveUsername.set(client.clientId);\r\n            }\r\n\r\n            if (this.acceptingJoinMessages && get(preferences.joinLeaveMessages)) {\r\n                this.addMessage(new ChatMessage(undefined, \"system\", `${client.clientId} joined the room.`));\r\n            }\r\n        });\r\n\r\n        room.state.clientData.onRemove((client: ClientData) => {\r\n            this.clients.update((clients) => clients.filter((value) => client.sessionId !== value.sessionId));\r\n            if (get(preferences.joinLeaveMessages)) {\r\n                this.addMessage(new ChatMessage(undefined, \"system\", `${client.clientId} left the room.`));\r\n            }\r\n        });\r\n\r\n        room.onMessage(\"server-chat\", (message) => {\r\n            const chat = (msg: { serializedMessage: { text: string; isError: boolean } }) => {\r\n                const chatMessage = new ChatMessage(undefined, \"system\", msg.serializedMessage.text, msg.serializedMessage.isError);\r\n                this.addMessage(chatMessage);\r\n            };\r\n\r\n            if (Array.isArray(message)) {\r\n                message.forEach((subMessage) => chat(subMessage));\r\n            } else {\r\n                chat(message);\r\n            }\r\n        });\r\n\r\n        room.onMessage(\"client-chat\", (message) => {\r\n            const { msg, author }: { msg: string; author: { sessionId: string; clientId: string } } = message;\r\n\r\n            console.debug(\"MESSAGE:\", message);\r\n            this.addMessage(new ChatMessage(author.clientId, \"user\", msg));\r\n        });\r\n    };\r\n\r\n    private handleError = (err: any) => {\r\n        const toastContainer = get(toastContainerStore);\r\n        if (err.code === 4101) {\r\n            toastContainer.addToasts(new ToastData(\"error\", \"Unable to Join\", \"Username was taken\"));\r\n        } else if (err.code === 4121) {\r\n            toastContainer.addToasts(new ToastData(\"error\", \"Unable to Join\", \"Username is too long\"));\r\n        } else if (err.code === 4122) {\r\n            toastContainer.addToasts(new ToastData(\"error\", \"Unable to Join\", \"Username contains illegal characters\"));\r\n        } else if (err.code === 4212) {\r\n            toastContainer.addToasts(new ToastData(\"error\", \"Unable to Join\", \"Room does not exist or is full\"));\r\n        }\r\n        console.error(`Colyseus error (${err.code}): ${err.message}`);\r\n        closeTab(this);\r\n    };\r\n\r\n    override dispose = async () => {\r\n        const room = get(this.roomStore);\r\n        if (room) {\r\n            room.removeAllListeners();\r\n            if (room.connection.isOpen) {\r\n                await room.leave(true);\r\n            }\r\n        }\r\n    };\r\n}\r\n","<script lang=\"ts\">\r\n    import type { ChatMessage } from \"$lib/classes/ChatMessage\";\r\n    import { onMount } from \"svelte\";\r\n    import type { ChatTab } from \"$lib/classes/ChatTab\";\r\n    import { get } from \"svelte/store\";\r\n    import { preferences } from \"$lib/classes/Preferences\";\r\n    import { ChatStyle } from \"$lib/enums\";\r\n\r\n    export let chatTab: ChatTab;\r\n    export let message: ChatMessage;\r\n    export let relativeStartTime: number;\r\n    export let unreadIndicator: boolean = false;\r\n\r\n    let messageContent: HTMLSpanElement;\r\n\r\n    let colour = \"text-theme-500\";\r\n    let author = \"invalid\";\r\n    if (message.type === \"user\") {\r\n        colour = \"text-violet-500\";\r\n        author = message.author || \"invalid\";\r\n    } else if (message.type === \"system\") {\r\n        colour = \"text-sky-500\";\r\n        author = \"SYSTEM\";\r\n    }\r\n\r\n    let includesMention = false;\r\n\r\n    onMount(() => {\r\n        // https://stackoverflow.com/a/65149088\r\n        const usernames = get(chatTab.clients).map((client) => client.clientId);\r\n        const usernameMatchQueury = usernames.map((u) => u.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&\")).join(\"|\"); // Escapes special characters and joins each username by a '|'\r\n        const pattern = new RegExp(`(.*?)(${usernameMatchQueury})`, \"g\");\r\n        const matches = message.text.split(pattern).filter(Boolean);\r\n\r\n        messageContent.innerText = \"\";\r\n        for (const match of matches) {\r\n            if (usernames.includes(match)) {\r\n                const el = document.createElement(\"span\");\r\n                el.innerText = match;\r\n                el.className = \"bg-violet-200 dark:bg-violet-400 dark:hover:bg-violet-500 rounded px-0.5 text-violet-400 dark:text-violet-600 transition-colors hover:bg-violet-300 hover:text-violet-600 dark:hover:text-violet-800 not-italic\";\r\n                messageContent.appendChild(el);\r\n\r\n                // Highlight the entire message if the user was mentioned\r\n                if (match === get(chatTab.effectiveUsername)) {\r\n                    includesMention = true;\r\n                }\r\n            } else {\r\n                messageContent.appendChild(document.createTextNode(match));\r\n            }\r\n        }\r\n    });\r\n\r\n    const chatStyle = preferences.chatStyle;\r\n</script>\r\n\r\n<div class=\"{$chatStyle === ChatStyle.Cozy ? 'text-base' : 'text-sm'} {unreadIndicator ? ' unread-msg-shadow' : ''}{includesMention ? ' bg-amber-100 dark:bg-amber-400/20' : ''}\">\r\n    <span class=\"font-mono text-theme-400\">{message.getRelativeTime(relativeStartTime)}</span>\r\n    <span class=\"font-semibold {colour}\">[{author}]</span>\r\n    <span bind:this={messageContent} class=\"whitespace-pre-wrap {message.type === 'system' ? 'italic text-theme-400' : 'not-italic'}{message.isError ? ' !text-red-400' : ''}\" />\r\n</div>\r\n","<script lang=\"ts\">\r\n    import type { ChatTab } from \"$lib/classes/ChatTab\";\r\n    import { afterUpdate, onDestroy, onMount } from \"svelte\";\r\n    import ChatItem from \"./ChatItem.svelte\";\r\n    import { preferencesModalStore, exportModalStore } from \"$lib/classes/Stores\";\r\n    import { get, type Unsubscriber } from \"svelte/store\";\r\n    import { AutoScrollBehaviour, ChatStyle } from \"$lib/enums\";\r\n    import { commandRefs } from \"$lib/classes/CommandDispatcher\";\r\n    import { Icon } from \"@steeze-ui/svelte-icon\";\r\n    import { PaperAirplane, Clipboard, ArrowDownTray, Cog6Tooth, ArrowRightOnRectangle } from \"@steeze-ui/heroicons\";\r\n    import { closeTab } from \"$lib/classes/TabHandler\";\r\n    import { computePosition, flip, arrow, offset, shift } from \"@floating-ui/dom\";\r\n    import { preferences } from \"$lib/classes/Preferences\";\r\n    import type { ChatMessage } from \"$lib/classes/ChatMessage\";\r\n\r\n    export let chatTab: ChatTab;\r\n    const roomName = chatTab.name;\r\n\r\n    let messageElement: HTMLInputElement;\r\n    let messageValue: string = \"\";\r\n    let messageHistory: HTMLDivElement;\r\n\r\n    let showShadow: boolean;\r\n    let queueAutoScroll = true;\r\n\r\n    const messages = chatTab.messages;\r\n    const effectiveUsername = chatTab.effectiveUsername;\r\n\r\n    const clients = chatTab.clients;\r\n    let messagesStoreUnsubscribe: Unsubscriber;\r\n\r\n    $: commands = Object.keys(commandRefs);\r\n\r\n    let copyRoomIDButton: HTMLButtonElement;\r\n    let copyRoomIDButtonTooltip: HTMLDivElement;\r\n    let copyRoomIDButtonTooltipArrow: HTMLDivElement;\r\n    let copyRoomIDButtonTooltipShowTimeout: ReturnType<typeof setTimeout> | null = null;\r\n    let copyRoomIDButtonTooltipSuccess: boolean;\r\n\r\n    const chatStyle = preferences.chatStyle;\r\n    const autoScrollBehaviour = preferences.autoScrollBehaviour;\r\n\r\n    onMount(() => {\r\n        updateShowShadow();\r\n        messageElement.focus();\r\n\r\n        messagesStoreUnsubscribe = messages.subscribe((msgs: ChatMessage[]) => {\r\n            // Handle auto-scroll now, but only scoll after the message has been added to the DOM (afterUpdate)\r\n            if ($autoScrollBehaviour === AutoScrollBehaviour.Always || ($autoScrollBehaviour === AutoScrollBehaviour.OnlySelf && msgs.at(-1)?.author === $effectiveUsername)) {\r\n                queueAutoScroll = true;\r\n            }\r\n        });\r\n    });\r\n\r\n    onDestroy(() => {\r\n        messagesStoreUnsubscribe();\r\n    });\r\n\r\n    afterUpdate(() => {\r\n        if (queueAutoScroll) {\r\n            messageHistory.scrollTo(0, messageHistory.scrollHeight);\r\n            queueAutoScroll = false;\r\n        }\r\n    });\r\n\r\n    const onSubmitMessage = async () => {\r\n        const room = get(chatTab.roomStore);\r\n        messageValue = messageValue.replace(/[^\\x20-\\x7F]/g, \"\"); // Remove all characters that lie out of the ASCII 20 - 7F range\r\n\r\n        if (room) {\r\n            if (messageValue.startsWith(\"/\")) {\r\n                // Commands\r\n                // Remove consecutive spaces, remove slashes, and trim leading and trailing spaces\r\n                const command = messageValue\r\n                    .replace(/\\/|([/ ]+(?= ))/g, \"\")\r\n                    .trim()\r\n                    .split(\" \");\r\n                const commandName = command[0];\r\n                const args = command.slice(1);\r\n\r\n                console.debug(\"COMMAND:\", commandName);\r\n                const response = await chatTab.commandDispatcher.executeCommand(commandName, ...args);\r\n                if (response) {\r\n                    chatTab.addMessage(response);\r\n                }\r\n            } else {\r\n                // Chat messages\r\n                const msg = messageValue.replace(/[^ -~]+/g, \"\").trim();\r\n                if (msg.length > 0) {\r\n                    room.send(\"client-chat\", { msg: messageValue });\r\n                }\r\n            }\r\n        }\r\n        messageValue = \"\";\r\n\r\n        // Automtically mark as read\r\n        chatTab.lastReadMessage = undefined;\r\n    };\r\n\r\n    const suggestCommand = (commandName: string) => {\r\n        messageValue += \"/\" + commandName;\r\n        messageElement.focus();\r\n    };\r\n\r\n    const onKeyDown = (event: KeyboardEvent) => {\r\n        if (!event.repeat) {\r\n            if (event.key === \"Escape\") {\r\n                // Manually mark as read\r\n                chatTab.lastReadMessage = undefined;\r\n            } else if (document.activeElement !== messageElement && !event.ctrlKey && !event.altKey) {\r\n                if (event.key.match(/^[\\x20-\\x7F]$/g)) {\r\n                    // Automatically focus the message box\r\n                    messageElement.focus();\r\n                } else if ([\"Delete\", \"Backspace\"].includes(event.key)) {\r\n                    // Automatically focus the message box without affecting the input value\r\n                    messageElement.focus();\r\n                    event.preventDefault();\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    const updateShowShadow = () => {\r\n        showShadow = messageHistory.scrollHeight - messageHistory.scrollTop > messageHistory.clientHeight;\r\n    };\r\n\r\n    const copyRoomID = () => {\r\n        // Copy code to clipboard\r\n        navigator.clipboard.writeText($roomName).then(\r\n            () => {\r\n                copyRoomIDButtonTooltipSuccess = true;\r\n                showCopyRoomIdTooltip();\r\n            },\r\n            () => {\r\n                copyRoomIDButtonTooltipSuccess = false;\r\n                showCopyRoomIdTooltip();\r\n            },\r\n        );\r\n    };\r\n\r\n    const showCopyRoomIdTooltip = () => {\r\n        // Show tooltip\r\n        copyRoomIDButtonTooltip.style.opacity = \"1\";\r\n\r\n        // Clear existing timeout\r\n        if (copyRoomIDButtonTooltipShowTimeout !== null) {\r\n            clearTimeout(copyRoomIDButtonTooltipShowTimeout);\r\n        }\r\n\r\n        // Set tooltip to disappear after 1s\r\n        copyRoomIDButtonTooltipShowTimeout = setTimeout(() => {\r\n            copyRoomIDButtonTooltip.style.opacity = \"0\";\r\n            copyRoomIDButtonTooltipShowTimeout = null;\r\n        }, 1000);\r\n\r\n        // Position tooltip\r\n        computePosition(copyRoomIDButton, copyRoomIDButtonTooltip, {\r\n            placement: \"top\",\r\n            middleware: [offset(10), flip({ padding: 5 }), shift({ padding: 5 }), arrow({ element: copyRoomIDButtonTooltipArrow })],\r\n        }).then(({ x, y, placement, middlewareData }) => {\r\n            Object.assign(copyRoomIDButtonTooltip.style, {\r\n                left: `${x}px`,\r\n                top: `${y}px`,\r\n            });\r\n\r\n            if (middlewareData.arrow) {\r\n                const { x: arrowX, y: arrowY } = middlewareData.arrow;\r\n\r\n                const staticSide = {\r\n                    top: \"bottom\",\r\n                    right: \"left\",\r\n                    bottom: \"top\",\r\n                    left: \"right\",\r\n                }[placement.split(\"-\")[0]] as string;\r\n\r\n                Object.assign(copyRoomIDButtonTooltipArrow.style, {\r\n                    left: arrowX !== null && arrowX !== undefined ? `${arrowX}px` : \"\",\r\n                    top: arrowY !== null && arrowY !== undefined ? `${arrowY}px` : \"\",\r\n                    right: \"\",\r\n                    bottom: \"\",\r\n                    [staticSide]: \"-4px\",\r\n                });\r\n            }\r\n        });\r\n    };\r\n</script>\r\n\r\n<svelte:window on:resize={updateShowShadow} on:keydown={onKeyDown} />\r\n\r\n<div class=\"flex w-full flex-grow flex-row\">\r\n    <div class=\"flex flex-1 flex-col overflow-clip border-r-2 border-theme-300\">\r\n        <div bind:this={messageHistory} on:scroll={updateShowShadow} class=\"{$chatStyle === ChatStyle.Cozy ? 'gap-1.5' : 'gap-0.5'} flex flex-grow basis-0 flex-col overflow-y-scroll break-words px-3 pt-3\">\r\n            {#each $messages as message, i (message)}\r\n                <ChatItem {chatTab} {message} unreadIndicator={i !== $messages.length - 1 && chatTab.lastReadMessage === message} relativeStartTime={get(chatTab.roomStore).state.serverStartTime} />\r\n            {/each}\r\n        </div>\r\n        <form on:submit|preventDefault={onSubmitMessage} class=\"p-4 transition-shadow duration-150 {showShadow && 'chat-entry-shadow'}\">\r\n            <div class=\"flex h-8 w-full rounded bg-theme-100 ring-2 ring-theme-300\">\r\n                <!-- svelte-ignore a11y-autofocus -->\r\n                <input type=\"text\" autofocus bind:this={messageElement} bind:value={messageValue} placeholder=\"Message {$roomName}\" class=\"h-full flex-grow bg-transparent pl-2 text-sm placeholder:text-theme-300\" />\r\n                <button class=\"group aspect-square h-full py-1.5\">\r\n                    <Icon src={PaperAirplane} class=\"stroke-theme-300 stroke-2 transition-colors group-hover:stroke-theme-400\" />\r\n                </button>\r\n            </div>\r\n        </form>\r\n    </div>\r\n    <div class=\"flex w-80 flex-col\">\r\n        <div class=\"flex h-8 border-b-2 border-theme-300\">\r\n            <button bind:this={copyRoomIDButton} on:click={copyRoomID} title=\"Copy Room ID\" class=\"group flex-grow py-1 transition-colors hover:bg-theme-200\">\r\n                <Icon src={Clipboard} class=\"stroke-theme-400 stroke-2 transition-colors group-hover:stroke-theme-500\" />\r\n            </button>\r\n            <div bind:this={copyRoomIDButtonTooltip} class=\"pointer-events-none absolute rounded-lg px-2 py-1 opacity-0 drop-shadow-sm transition-opacity duration-150 {copyRoomIDButtonTooltipSuccess ? 'bg-green-300 text-green-600' : 'bg-theme-200 text-theme-500'}\">\r\n                {copyRoomIDButtonTooltipSuccess ? \"Copied!\" : \"Unable to copy\"}\r\n                <div bind:this={copyRoomIDButtonTooltipArrow} class=\"absolute h-2 w-2 rotate-45 {copyRoomIDButtonTooltipSuccess ? 'bg-green-300' : 'bg-theme-200'}\" />\r\n            </div>\r\n            <button on:click={() => $exportModalStore.open(chatTab)} title=\"Export Chat History\" class=\"group flex-grow py-1 transition-colors hover:bg-theme-200\">\r\n                <Icon src={ArrowDownTray} class=\"stroke-theme-400 stroke-2 transition-colors group-hover:stroke-theme-500\" />\r\n            </button>\r\n            <button on:click={$preferencesModalStore.open} title=\"Preferences\" class=\"group flex-grow py-1 transition-colors hover:bg-theme-200\">\r\n                <Icon src={Cog6Tooth} class=\"stroke-theme-400 stroke-2 transition-colors group-hover:stroke-theme-500\" />\r\n            </button>\r\n            <button on:click={() => closeTab(chatTab)} title=\"Leave Room\" class=\"group flex-grow py-1 transition-colors hover:bg-theme-200\">\r\n                <Icon src={ArrowRightOnRectangle} class=\"stroke-red-500/50 stroke-2 transition-colors group-hover:stroke-red-500/80\" />\r\n            </button>\r\n        </div>\r\n        <div class=\"flex flex-1 flex-col overflow-clip border-b border-theme-300 p-5\">\r\n            <span class=\"border-b-2 border-theme-300 pb-2 text-2xl\">Members</span>\r\n            <div class=\"flex flex-col overflow-y-scroll\">\r\n                {#each $clients as client}\r\n                    <div class=\"flex p-4\">\r\n                        {#if client.isLeader}\r\n                            <span class=\"mr-2\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"h-6 w-6 fill-amber-400 stroke-amber-400 stroke-2\">\r\n                                    <path d=\"M4 19H20M11.2929 5.70711L8.70711 8.2929C8.31658 8.68342 7.68342 8.68342 7.29289 8.2929L5.70711 6.70711C5.07714 6.07714 4 6.52331 4 7.41422V15C4 15.5523 4.44772 16 5 16H19C19.5523 16 20 15.5523 20 15V7.41421C20 6.52331 18.9229 6.07714 18.2929 6.70711L16.7071 8.2929C16.3166 8.68342 15.6834 8.68342 15.2929 8.2929L12.7071 5.70711C12.3166 5.31658 11.6834 5.31658 11.2929 5.70711Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                </svg>\r\n                            </span>\r\n                        {:else}\r\n                            <span class=\"mr-2\">\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" class=\"h-6 w-6 fill-none stroke-theme-400 stroke-2\">\r\n                                    <path d=\"M17.5 21.0001H6.5C5.11929 21.0001 4 19.8808 4 18.5001C4 14.4194 10 14.5001 12 14.5001C14 14.5001 20 14.4194 20 18.5001C20 19.8808 18.8807 21.0001 17.5 21.0001Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                    <path d=\"M12 11C14.2091 11 16 9.20914 16 7C16 4.79086 14.2091 3 12 3C9.79086 3 8 4.79086 8 7C8 9.20914 9.79086 11 12 11Z\" stroke-linecap=\"round\" stroke-linejoin=\"round\" />\r\n                                </svg>\r\n                            </span>\r\n                        {/if}\r\n                        <span class=\"truncate font-bold {client.clientId === $effectiveUsername ? ' text-violet-500' : ''}\">{client.clientId}</span>\r\n                    </div>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n        <div class=\"flex flex-1 flex-col overflow-clip border-t border-theme-300 p-5\">\r\n            <span class=\"border-b-2 border-theme-300 pb-2 text-2xl\">Commands</span>\r\n            <div class=\"flex flex-col overflow-y-scroll\">\r\n                {#each commands as command}\r\n                    <button on:click={() => suggestCommand(command)} class=\"mt-2 flex\">\r\n                        <div class=\"w-full rounded-lg px-3 py-2 text-start ring-2 ring-inset ring-theme-200\">{command}</div>\r\n                    </button>\r\n                {/each}\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","<script lang=\"ts\">\r\n    import { ChatTab } from \"$lib/classes/ChatTab\";\r\n    import type { Tab } from \"$lib/classes/Tab\";\r\n    import { Home } from \"@steeze-ui/heroicons\";\r\n    import { Icon } from \"@steeze-ui/svelte-icon\";\r\n\r\n    export let tab: Tab;\r\n    export let isCurrentTab: boolean;\r\n\r\n    const tabName = tab.name;\r\n    const isUnread = (tab as ChatTab)?.isUnread;\r\n</script>\r\n\r\n<button on:click class=\"group relative flex cursor-pointer border-x border-theme-200 first:border-l-0 first:border-l-transparent last:border-r-2\">\r\n    <div class=\"flex h-full flex-grow items-center {tab.heroIcon === undefined ? 'px-4' : 'px-1'} text-sm font-semibold shadow-[0_2px] transition-all group-hover:bg-theme-200 {isCurrentTab ? 'stroke-violet-500 text-violet-500 shadow-violet-500' : 'stroke-theme-400 text-theme-400 shadow-transparent group-hover:stroke-theme-500 group-hover:text-theme-500'}\">\r\n        {#if tab.heroIcon !== undefined}\r\n            <Icon src={Home} class=\"h-5 w-5 cursor-pointer fill-none\" />\r\n        {:else}\r\n            {$tabName}\r\n        {/if}\r\n    </div>\r\n    {#if tab instanceof ChatTab}\r\n        {#if $isUnread}\r\n            <div class=\"absolute left-1 top-1 h-1.5 w-1.5 rounded-full bg-violet-400\"></div>\r\n        {/if}\r\n    {/if}\r\n</button>\r\n","<script lang=\"ts\">\r\n    let dialog: HTMLDialogElement;\r\n\r\n    const onClick = (e: MouseEvent) => {\r\n        if (e.target === dialog) {\r\n            dialog.close();\r\n        }\r\n    };\r\n\r\n    export const open = () => {\r\n        if (!dialog.open) {\r\n            dialog.showModal();\r\n        }\r\n    };\r\n\r\n    export const close = () => {\r\n        if (dialog.open) {\r\n            dialog.close();\r\n        }\r\n    };\r\n</script>\r\n\r\n<!-- svelte-ignore a11y-click-events-have-key-events -->\r\n<!-- svelte-ignore a11y-no-noninteractive-element-interactions -->\r\n<dialog bind:this={dialog} on:click={onClick} class=\"rounded-lg bg-theme-100\">\r\n    <slot />\r\n</dialog>\r\n","<script lang=\"ts\">\r\n    import Modal from \"../Modal.svelte\";\r\n    import { preferences } from \"$lib/classes/Preferences\";\r\n    import { AutoScrollBehaviour, ChatStyle } from \"$lib/enums\";\r\n\r\n    let modal: Modal;\r\n\r\n    export const open = () => modal.open();\r\n    export const close = () => modal.close();\r\n\r\n    const chatStyle = preferences.chatStyle;\r\n    const autoScrollBehaviour = preferences.autoScrollBehaviour;\r\n    const darkMode = preferences.darkMode;\r\n    const joinLeaveMessages = preferences.joinLeaveMessages;\r\n</script>\r\n\r\n<Modal bind:this={modal}>\r\n    <div class=\"flex w-96 flex-col p-6\">\r\n        <h2 class=\"mb-6 text-center text-2xl\">Preferences</h2>\r\n        <form on:submit|preventDefault class=\"flex flex-col gap-2\">\r\n            <div class=\"pref-option\">\r\n                <label for=\"chat-style\">Chat style</label>\r\n                <select id=\"chat-style\" bind:value={$chatStyle}>\r\n                    <option value={ChatStyle.Cozy}>Cozy</option>\r\n                    <option value={ChatStyle.Compact}>Compact</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"pref-option\">\r\n                <label for=\"auto-scroll-behaviour\">Auto scroll behaviour</label>\r\n                <select id=\"auto-scroll-behaviour\" bind:value={$autoScrollBehaviour}>\r\n                    <option value={AutoScrollBehaviour.Always}>Always</option>\r\n                    <option value={AutoScrollBehaviour.OnlySelf}>Only Self</option>\r\n                    <option value={AutoScrollBehaviour.Never}>Never</option>\r\n                </select>\r\n            </div>\r\n            <div class=\"pref-option\">\r\n                <label for=\"dark-mode\">Dark mode</label>\r\n                <input id=\"dark-mode\" bind:checked={$darkMode} type=\"checkbox\" />\r\n            </div>\r\n            <div class=\"pref-option\">\r\n                <label for=\"join-leave-messages\">Join & leave messages</label>\r\n                <input id=\"join-leave-messages\" bind:checked={$joinLeaveMessages} type=\"checkbox\" />\r\n            </div>\r\n        </form>\r\n    </div>\r\n</Modal>\r\n\r\n<style lang=\"postcss\">\r\n    .pref-option {\r\n        @apply flex justify-between;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    export let minlength: number = -524288;\r\n    export let maxlength: number = 524288;\r\n    export let min: string = \"\";\r\n    export let max: string = \"\";\r\n    export let placeholder: string = \"\";\r\n    export let required: boolean = false;\r\n    export let omitRingStyle: boolean = false;\r\n    export let disable1Password: boolean = true;\r\n    export let value: string = \"\";\r\n    export let element: HTMLInputElement | null = null;\r\n</script>\r\n\r\n<input {minlength} {maxlength} {min} {max} {placeholder} {required} data-1p-ignore={disable1Password} bind:this={element} bind:value on:input class=\"{$$props.class || ''} h-7 w-64 bg-theme-100 px-3 text-lg font-medium placeholder:text-theme-300 {omitRingStyle ? 'transition-all duration-75' : 'ring-input'}\" />\r\n","<script lang=\"ts\">\r\n    import { ChatTab } from \"$lib/classes/ChatTab\";\r\n    import { toastContainerStore } from \"$lib/classes/Stores\";\r\n    import { addTab } from \"$lib/classes/TabHandler\";\r\n    import { preferences } from \"$lib/classes/Preferences\";\r\n    import ToastData from \"$lib/classes/ToastData\";\r\n    import Input from \"./Input.svelte\";\r\n    import { Icon } from \"@steeze-ui/svelte-icon\";\r\n    import { Cog6Tooth } from \"@steeze-ui/heroicons\";\r\n    import { preferencesModalStore } from \"$lib/classes/Stores\";\r\n\r\n    let roomIdValue: string;\r\n\r\n    const username = preferences.username;\r\n    username.subscribe((value) => {\r\n        $username = value.replace(/[^\\x20-\\x7F]/g, \"\");\r\n    });\r\n\r\n    const createRoom = () => {\r\n        addTab(new ChatTab());\r\n    };\r\n\r\n    const joinRoom = () => {\r\n        if (roomIdValue.length !== 4) {\r\n            $toastContainerStore.addToasts(new ToastData(\"warning\", \"Invalid Input\", \"Room ID must be 4 characters long\"));\r\n            return;\r\n        }\r\n\r\n        addTab(new ChatTab(roomIdValue));\r\n    };\r\n</script>\r\n\r\n<div class=\"relative flex flex-grow flex-col items-center justify-center gap-20\">\r\n    <button on:click={$preferencesModalStore.open} class=\"group absolute left-4 top-4 h-9 w-9 rounded-lg bg-theme-100 p-1.5 ring-2 ring-inset ring-theme-200 transition-all hover:bg-theme-200 hover:ring-violet-500\">\r\n        <Icon src={Cog6Tooth} class=\"stroke-theme-300 stroke-2 transition-colors group-hover:stroke-violet-500\" />\r\n    </button>\r\n    <div class=\"absolute right-4 top-4 flex flex-col\">\r\n        <span>Username</span>\r\n        <Input bind:value={$username} placeholder=\"Anonymous\" maxlength={24} />\r\n    </div>\r\n    <div class=\"flex flex-col items-center\">\r\n        <h1 class=\"text-3xl\">Welcome to <span class=\"text-amber-500\">Pyrite</span></h1>\r\n        <p>A messaging app</p>\r\n    </div>\r\n    <div class=\"flex w-48 flex-col items-center gap-6\">\r\n        <button on:click={createRoom} class=\"btn w-full\">Create a room</button>\r\n        <p class=\"text-lg\">OR</p>\r\n        <div class=\"flex flex-col items-center\">\r\n            <p class=\"mb-2\">Join an existing one</p>\r\n            <div class=\"flex flex-col gap-2\">\r\n                <form on:submit|preventDefault={joinRoom} class=\"ring-input flex h-fit flex-row overflow-clip\">\r\n                    <!-- prettier-ignore -->\r\n                    <Input bind:value={roomIdValue} placeholder=\"Enter Code\" id=\"room-id-input\" on:input={() => {roomIdValue = roomIdValue.replaceAll(/[^A-Za-z]+/g, '').toUpperCase()}} maxlength={4} omitRingStyle class=\"h-9 w-full flex-grow text-center\" />\r\n                    <button type=\"submit\" class=\"group box-content flex w-8 items-center bg-theme-100 px-0.5 transition-colors hover:bg-violet-500\">\r\n                        <svg viewBox=\"0 0 24 24\" class=\"fill-theme-400 transition-colors group-hover:fill-theme-100\">\r\n                            <path d=\"M12.1714 10.9998L7.51451 6.34292L8.92872 4.92871L15.9998 11.9998L8.92872 19.0708L7.51451 17.6566L12.1713 12.9998L2.99953 12.9999L2.99951 10.9999L12.1714 10.9998ZM17.9996 18.9997L17.9996 4.99972H19.9996L19.9996 18.9997H17.9996Z\" />\r\n                        </svg>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import type { ExportTimeRange } from \"$lib/enums\";\r\n\r\nexport class ExportOptions {\r\n    timeRange: ExportTimeRange;\r\n    excludeSystemMessages: boolean;\r\n\r\n    constructor(timeRange: ExportTimeRange = 0, excludeSystemMessages: boolean = false) {\r\n        this.timeRange = timeRange;\r\n        this.excludeSystemMessages = excludeSystemMessages;\r\n    }\r\n}\r\n","<script lang=\"ts\">\r\n    import type { ChatTab } from \"$lib/classes/ChatTab\";\r\n    import { ExportOptions } from \"$lib/classes/ExportOptions\";\r\n    import { ExportTimeRange } from \"$lib/enums\";\r\n    import { get } from \"svelte/store\";\r\n    import Modal from \"../Modal.svelte\";\r\n    import dayjs, { type Dayjs } from \"dayjs\";\r\n    import type { ChatMessage } from \"$lib/classes/ChatMessage\";\r\n    import { toastContainerStore } from \"$lib/classes/Stores\";\r\n    import ToastData from \"$lib/classes/ToastData\";\r\n    import { mkConfig, generateCsv, download } from \"export-to-csv\";\r\n\r\n    let modal: Modal;\r\n\r\n    let context: ChatTab;\r\n    $: context;\r\n\r\n    let options: ExportOptions;\r\n\r\n    export const open = (chatTab: ChatTab) => {\r\n        context = chatTab;\r\n        options = new ExportOptions();\r\n        modal.open();\r\n    };\r\n    export const close = () => modal.close();\r\n\r\n    const processExport = () => {\r\n        const getFilteredMessages = (ordered: ChatMessage[]) => {\r\n            if (options.excludeSystemMessages) {\r\n                return ordered.filter((msg) => msg.type !== \"system\");\r\n            }\r\n            return ordered;\r\n        };\r\n\r\n        const getFilteredMessagesInRange = (ordered: ChatMessage[], date: Dayjs) => {\r\n            /*\r\n            This iterates backwards from the end of the array until it finds a message\r\n            that was sent before the 'date' specified, and returns its index. It adds 1 to\r\n            the result to get the last message that was sent *after* the 'date' specified.\r\n            */\r\n            const rangeExtentIndex = ordered.findLastIndex((msg) => dayjs(msg.time).isBefore(date)) + 1;\r\n\r\n            // This gets all messages from the 'rangeExtentIndex' to the latest message.\r\n            const messagesInRange = ordered.slice(rangeExtentIndex);\r\n\r\n            return getFilteredMessages(messagesInRange);\r\n        };\r\n\r\n        const orderedMessages = get(context.messages);\r\n        let validatedMessages: ChatMessage[];\r\n\r\n        switch (options.timeRange) {\r\n            case ExportTimeRange.FifteenMinutes:\r\n                validatedMessages = getFilteredMessagesInRange(orderedMessages, dayjs().subtract(15, \"minutes\"));\r\n                break;\r\n            case ExportTimeRange.OneHour:\r\n                validatedMessages = getFilteredMessagesInRange(orderedMessages, dayjs().subtract(1, \"hour\"));\r\n                break;\r\n            case ExportTimeRange.SixHours:\r\n                validatedMessages = getFilteredMessagesInRange(orderedMessages, dayjs().subtract(6, \"hour\"));\r\n                break;\r\n            case ExportTimeRange.Today:\r\n                validatedMessages = getFilteredMessagesInRange(orderedMessages, dayjs().startOf(\"day\"));\r\n                break;\r\n            default:\r\n                validatedMessages = getFilteredMessages(orderedMessages);\r\n                break;\r\n        }\r\n\r\n        if (validatedMessages.length > 0) {\r\n            // prettier-ignore\r\n            const csvBody = validatedMessages.map((msg) => {return {\r\n                time: dayjs(msg.time).format(\"dddd YYYY/MM/DD h:mm:ss.SSS A\"),\r\n                author: msg.type === \"system\" ? \"*SYSTEM*\" : msg.author!,\r\n                message: msg.text.replace(/\\t/g, \" \"),\r\n            };});\r\n\r\n            // prettier-ignore\r\n            const fileName = [\r\n                get(context.name), // Room name\r\n                \"export\", // File descriptor / role\r\n                dayjs().format(\"YYYY-MM-DD_HH-mm-ss\"), // Date & time of export\r\n                `[${validatedMessages.length} messages]`, // Message count\r\n            ].join(\" \");\r\n\r\n            const csvConfig = mkConfig({ useKeysAsHeaders: true, fieldSeparator: \"\\t\", filename: fileName });\r\n            const csv = generateCsv(csvConfig)(csvBody);\r\n            download(csvConfig)(csv);\r\n        } else {\r\n            $toastContainerStore.addToasts(new ToastData(\"warning\", \"Export Failed\", \"No messages match the options\"));\r\n        }\r\n    };\r\n</script>\r\n\r\n<Modal bind:this={modal}>\r\n    {#if context && options}\r\n        <div class=\"flex w-96 flex-col p-6\">\r\n            <h2 class=\"mb-6 text-center text-2xl\">Export Chat</h2>\r\n            <form on:submit|preventDefault class=\"flex flex-col gap-2\">\r\n                <div class=\"pref-option\">\r\n                    <label for=\"time-range\">Time range</label>\r\n                    <select id=\"time-range\" bind:value={options.timeRange}>\r\n                        <option value={ExportTimeRange.FifteenMinutes}>15 Mins</option>\r\n                        <option value={ExportTimeRange.OneHour}>1 Hour</option>\r\n                        <option value={ExportTimeRange.SixHours}>6 Hours</option>\r\n                        <option value={ExportTimeRange.Today}>Today</option>\r\n                        <option value={ExportTimeRange.All}>All</option>\r\n                    </select>\r\n                </div>\r\n                <div class=\"pref-option\">\r\n                    <label for=\"exclude-system-messages\">Exclude system messages</label>\r\n                    <input id=\"exclude-system-messages\" bind:checked={options.excludeSystemMessages} type=\"checkbox\" />\r\n                </div>\r\n                <button on:click={processExport} class=\"btn mt-4\">Export</button>\r\n            </form>\r\n        </div>\r\n    {/if}\r\n</Modal>\r\n\r\n<style lang=\"postcss\">\r\n    .pref-option {\r\n        @apply flex justify-between;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    import { beforeNavigate } from \"$app/navigation\";\r\n    import { ChatTab } from \"$lib/classes/ChatTab\";\r\n    import { HomeTab } from \"$lib/classes/HomeTab\";\r\n    import ChatTabContent from \"$lib/components/ChatTabContent.svelte\";\r\n    import TabButton from \"$lib/components/TabButton.svelte\";\r\n    import PreferencesModal from \"$lib/components/Modal/PreferencesModal.svelte\";\r\n    import HomeTabContent from \"$lib/components/HomeTabContent.svelte\";\r\n    import { tabsStore, currentTabIdx, changeTab, closeAllTabs } from \"$lib/classes/TabHandler\";\r\n    import { preferencesModalStore, exportModalStore } from \"$lib/classes/Stores\";\r\n    import ExportModal from \"$lib/components/Modal/ExportModal.svelte\";\r\n\r\n    $: currentTab = $tabsStore[$currentTabIdx];\r\n\r\n    beforeNavigate(async () => {\r\n        closeAllTabs();\r\n    });\r\n</script>\r\n\r\n<PreferencesModal bind:this={$preferencesModalStore} />\r\n<ExportModal bind:this={$exportModalStore} />\r\n\r\n<div class=\"flex h-full w-full gap-4 p-6\">\r\n    <div class=\"flex flex-1 flex-col overflow-hidden rounded ring-2 ring-theme-300\">\r\n        <div class=\"flex h-7 border-b-2 border-theme-300\">\r\n            {#each $tabsStore as tab, index}\r\n                <TabButton on:click={() => changeTab(index)} {tab} isCurrentTab={currentTab === tab} />\r\n            {/each}\r\n        </div>\r\n        {#if currentTab instanceof HomeTab}\r\n            <HomeTabContent />\r\n        {:else if currentTab instanceof ChatTab}\r\n            {#key currentTab}\r\n                <ChatTabContent chatTab={currentTab} />\r\n            {/key}\r\n        {/if}\r\n    </div>\r\n</div>\r\n"],"names":["get","AutoScrollBehaviour","ChatStyle","ExportTimeRange"],"mappings":"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","x_google_ignoreList":[0,1]}