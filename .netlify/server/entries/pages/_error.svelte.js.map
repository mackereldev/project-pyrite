{"version":3,"file":"_error.svelte.js","sources":["../../../../../node_modules/.pnpm/@sveltejs+kit@1.22.3_svelte@4.1.1_vite@4.4.7/node_modules/@sveltejs/kit/src/runtime/app/stores.js","../../../../../src/routes/+error.svelte"],"sourcesContent":["import { getContext } from 'svelte';\nimport { browser } from './environment.js';\nimport { stores as browser_stores } from '../client/singletons.js';\n\n/**\n * A function that returns all of the contextual stores. On the server, this must be called during component initialization.\n * Only use this if you need to defer store subscription until after the component has mounted, for some reason.\n */\nexport const getStores = () => {\n\tconst stores = browser ? browser_stores : getContext('__svelte__');\n\n\treturn {\n\t\t/** @type {typeof page} */\n\t\tpage: {\n\t\t\tsubscribe: stores.page.subscribe\n\t\t},\n\t\t/** @type {typeof navigating} */\n\t\tnavigating: {\n\t\t\tsubscribe: stores.navigating.subscribe\n\t\t},\n\t\t/** @type {typeof updated} */\n\t\tupdated: stores.updated\n\t};\n};\n\n/**\n * A readable store whose value contains page data.\n *\n * On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n *\n * @type {import('svelte/store').Readable<import('@sveltejs/kit').Page>}\n */\nexport const page = {\n\tsubscribe(fn) {\n\t\tconst store = __SVELTEKIT_DEV__ ? get_store('page') : getStores().page;\n\t\treturn store.subscribe(fn);\n\t}\n};\n\n/**\n * A readable store.\n * When navigating starts, its value is a `Navigation` object with `from`, `to`, `type` and (if `type === 'popstate'`) `delta` properties.\n * When navigating finishes, its value reverts to `null`.\n *\n * On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n * @type {import('svelte/store').Readable<import('@sveltejs/kit').Navigation | null>}\n */\nexport const navigating = {\n\tsubscribe(fn) {\n\t\tconst store = __SVELTEKIT_DEV__ ? get_store('navigating') : getStores().navigating;\n\t\treturn store.subscribe(fn);\n\t}\n};\n\n/**\n * A readable store whose initial value is `false`. If [`version.pollInterval`](https://kit.svelte.dev/docs/configuration#version) is a non-zero value, SvelteKit will poll for new versions of the app and update the store value to `true` when it detects one. `updated.check()` will force an immediate check, regardless of polling.\n *\n * On the server, this store can only be subscribed to during component initialization. In the browser, it can be subscribed to at any time.\n * @type {import('svelte/store').Readable<boolean> & { check(): Promise<boolean> }}\n */\nexport const updated = {\n\tsubscribe(fn) {\n\t\tconst store = __SVELTEKIT_DEV__ ? get_store('updated') : getStores().updated;\n\n\t\tif (browser) {\n\t\t\tupdated.check = store.check;\n\t\t}\n\n\t\treturn store.subscribe(fn);\n\t},\n\tcheck: () => {\n\t\tthrow new Error(\n\t\t\tbrowser\n\t\t\t\t? 'Cannot check updated store before subscribing'\n\t\t\t\t: 'Can only check updated store in browser'\n\t\t);\n\t}\n};\n\n/**\n * @template {keyof ReturnType<typeof getStores>} Name\n * @param {Name} name\n * @returns {ReturnType<typeof getStores>[Name]}\n */\nfunction get_store(name) {\n\ttry {\n\t\treturn getStores()[name];\n\t} catch (e) {\n\t\tthrow new Error(\n\t\t\t`Cannot subscribe to '${name}' store on the server outside of a Svelte component, as it is bound to the current request via component context. This prevents state from leaking between users.` +\n\t\t\t\t'For more information, see https://kit.svelte.dev/docs/state-management#avoid-shared-state-on-the-server'\n\t\t);\n\t}\n}\n","<script lang=\"ts\">\r\n    import { page } from \"$app/stores\";\r\n    import { goto } from \"$app/navigation\";\r\n\r\n    $: message = statusMessages[$page.status as keyof typeof statusMessages];\r\n\r\n    const statusMessages = {\r\n        404: \"Page not found\",\r\n        401: \"Unauthorized\",\r\n        500: \"Internal error\",\r\n        502: \"Bad gateway\",\r\n    };\r\n</script>\r\n\r\n<div class=\"flex flex-col items-center justify-center gap-12\">\r\n    <div class=\"flex flex-row items-center justify-center gap-4\">\r\n        <h1 class=\"text-5xl font-light\">{$page.status}</h1>\r\n        <div class=\"h-12 w-0.5 flex-grow bg-theme-200\" />\r\n        <span class=\"text-lg\">{message}</span>\r\n    </div>\r\n    <button on:click={() => goto(\"/\")} class=\"btn absolute top-[60%]\">Return Home</button>\r\n</div>\r\n"],"names":[],"mappings":";AAQO,MAAM,YAAY,MAAM;AAC9B,QAAM,SAAoC,WAAW,YAAY;AAEjE,SAAO;AAAA;AAAA,IAEN,MAAM;AAAA,MACL,WAAW,OAAO,KAAK;AAAA,IACvB;AAAA;AAAA,IAED,YAAY;AAAA,MACX,WAAW,OAAO,WAAW;AAAA,IAC7B;AAAA;AAAA,IAED,SAAS,OAAO;AAAA,EAClB;AACA;AASO,MAAM,OAAO;AAAA,EACnB,UAAU,IAAI;AACb,UAAM,QAAgD,UAAW,EAAC;AAClE,WAAO,MAAM,UAAU,EAAE;AAAA,EACzB;AACF;;;;;AC/BU,QAAA,iBAAA;AAAA,IACF,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA,IACL,KAAK;AAAA;AANN,YAAU,eAAe,MAAM,MAAqC;;8KAYlC,MAAM,MAAM,CAAA,qFAAA,OAEtB,OAAO,CAAA;;","x_google_ignoreList":[0]}